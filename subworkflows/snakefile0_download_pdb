import os
import sys 

configfile: 'config.yaml'

sys.path.append(config['paths']['scripts'])
from simple_write import simple_write

configfile: 'config.yaml'


# force pdb update
<<<<<<< HEAD
pdb_main_updated = config['snake_donefiles']['sub0_pdb_main_download_done']
pdb_oversized_updated = config['snake_donefiles']['sub0_pdb_oversized_download_done']
if config['database_settings']['force_update_pdb'] and os.path.exists(pdb_main_updated):
    os.remove(pdb_main_updated)
if config['database_settings']['force_update_pdb'] and os.path.exists(pdb_oversized_updated):
    os.remove(pdb_oversized_updated)


localrules: all, download_main_pdb, download_oversized_pdb

rule all:
    input:
        #'intermediates/pdb_split.done'
        #pdb_updated
        config['snake_donefiles']['sub0_split_pdb_main_done'],
        config['snake_donefiles']['sub0_split_pdb_oversized_done'],
        config['snake_donefiles']['sub0_rename_oversized_done']
=======
pdb_updated = config['snake_donefiles']['sub0_pdb_download_done']
if config['database_settings']['force_update_pdb'] and os.path.exists(pdb_updated):
    os.remove(pdb_updated)


localrules: all, download_pdb

rule all:
    input:
        config['snake_donefiles']['sub0_split_pdb_done']
>>>>>>> addmodelsplittopdb
    output:
        done =  config['snake_donefiles']['sub0_all_done'] 
    shell:
        "touch {output.done}"


<<<<<<< HEAD
rule download_main_pdb:
    output:
        done =  config['snake_donefiles']['sub0_pdb_main_download_done'] 
    shell:
        """
        mkdir -p lib
        cd lib 
        rsync -rlpt -v -z -q --delete --port=33444 \
        rsync.rcsb.org::ftp_data/biounit/PDB/divided/ ./rcsb_pdb
=======
rule download_pdb:
    output:
        done =  config['snake_donefiles']['sub0_pdb_download_done']
    params:
        lib = config['paths']['lib']
    shell:
        """
        mkdir -p {params.lib}
        cd {params.lib} 
        rsync -rlpt -v -z -q --delete --port=33444 \
        rsync.rcsb.org::ftp_data/assemblies/mmCIF/divided/ ./rcsb_pdb
>>>>>>> addmodelsplittopdb
        touch ../{output.done}
        """


<<<<<<< HEAD
rule download_oversized_pdb:
    output:
        done = config['snake_donefiles']['sub0_pdb_oversized_download_done'],
        listfile = config['paths']['pdb_oversized_listfile']
    shell:
        """
        mkdir -p lib
        cd lib 
        rsync -rlpt -v -z -q --delete --port=33444 \
        rsync.rcsb.org::ftp/compatible/pdb_bundle/ ./rcsb_oversized
        cp rcsb_oversized/pdb_bundle_index.txt ../{output.listfile}
        touch ../{output.done}
        """



#rule rechain_move_oversized_chains:
#    input:
#        done = config['snake_donefiles']['sub0_pdb_oversized_download_done'],
#        listfile = config['paths']['pdb_oversized_listfile']
#    output:
#        done = config['snake_donefiles']['sub0_pdb_oversized_rechain_move_done']
#    run:
#        with open(input.listfile, 'r') as lf:
#            while pdb := lf.readline().strip():
#                div = pdb[1:3]
#                source_tar = '{}/{}/{}-pdb-bundle.tar.gz'.format(config['paths']['oversized_pdb'], div, pdb)
#                target_dir = f'{target_lib}/{div}/{pdb}/'
#                fill_rechained_pdb_into_lib(pdb, source_tar, target_dir)
#        simple_write(output.done, 'success')




rule ungzip_main:
    input:
        config['snake_donefiles']['sub0_pdb_main_download_done'],
    output:
        done =  config['snake_donefiles']['sub0_ungzip_main_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000" 
    params:
        scripts = config['paths']['scripts'],
        rcsb = config['paths']['rcsb']
    shell:
        """
        {params.scripts}/parallel_ungzip_all.sh {params.rcsb} {threads} 1000
        touch {output.done};
        """



rule unarchive_oversized:
    input:
        config['snake_donefiles']['sub0_pdb_oversized_download_done'],
    output:
        done =  config['snake_donefiles']['sub0_unarchive_oversized_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000"
    params:
        scripts = config['paths']['scripts'],
        rcsb_oversized = config['paths']['rcsb_oversized']
    shell:
        """
        {params.scripts}/parallel_untar_all.sh {params.rcsb_oversized} {threads} 1000
        touch {output.done};
        """



rule split_pdb_main:
    input:
        config['snake_donefiles']['sub0_ungzip_main_done'] 
    output:
        done =  config['snake_donefiles']['sub0_split_pdb_main_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000"
    params:
        scripts = config['paths']['scripts'],
        rcsb = config['paths']['rcsb'],
        split_chain = config['paths']['split_chain']
    shell:
        """
        {params.scripts}/parallel_split_pdb.pl {params.rcsb} {threads} {params.split_chain}
        touch {output.done}
=======
rule ungzip_pdb:
    input:
        config['snake_donefiles']['sub0_pdb_download_done'],
    output:
        done =  config['snake_donefiles']['sub0_ungzip_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000" 
    params:
        scripts = config['paths']['scripts'],
        lib = config['paths']['lib']
    shell:
        """
        {params.scripts}/parallel_ungzip_all.sh {params.lib}/rcsb_pdb {threads} 1000
        touch {output.done};
>>>>>>> addmodelsplittopdb
        """


rule split_pdb_oversized:
    input:
<<<<<<< HEAD
        config['snake_donefiles']['sub0_unarchive_oversized_done'] 
    output:
        done =  config['snake_donefiles']['sub0_split_pdb_oversized_done'] 
=======
        config['snake_donefiles']['sub0_ungzip_done'] 
    output:
        done =  config['snake_donefiles']['sub0_split_pdb_done'] 
>>>>>>> addmodelsplittopdb
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000"
<<<<<<< HEAD
    params:
        scripts = config['paths']['scripts'],
        rcsb_oversized = config['paths']['rcsb_oversized'],
        split_chain = config['paths']['split_chain']
    shell:
        """
        {params.scripts}/parallel_split_pdb.pl {params.rcsb_oversized} {threads} {params.split_chain}
        touch {output.done}
        """


rule rename_oversized_chains:
    input:
        done = config['snake_donefiles']['sub0_split_pdb_oversized_done'],
        listfile = config['paths']['pdb_oversized_listfile']
    output:
        done = config['snake_donefiles']['sub0_rename_oversized_done']
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000"
    params:
        python = config['runtime']['python'],
        scripts = config['paths']['scripts'],
        rcsb_oversized = config['paths']['rcsb_oversized']
    shell:
        """
        parallel -j{threads} {params.python} {params.scripts}/rename_oversized_chains.py --lib {params.rcsb_oversized} --pdb-id {{}} :::: {input.listfile};
        touch {output.done};
        """











=======
    run:
        from parallel_convert_split_cif import parallel_convert_split_rename_cifs
        rcsb = config['paths']['lib'] + '/rcsb_pdb'
        exe = config['paths']['cif2pdb']
        parallel_convert_split_rename_cifs(rcsb, exe, threads)
        simple_write(output.done)
>>>>>>> addmodelsplittopdb



