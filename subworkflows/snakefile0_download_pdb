import os
import sys 
import pickle

configfile: 'config.yaml'

sys.path.append(config['paths']['scripts'])
from simple_write import simple_write



# force pdb update
pdb_updated = config['snake_donefiles']['sub0_pdb_download_done']
if config['database_settings']['force_update_pdb'] and os.path.exists(pdb_updated):
    os.remove(pdb_updated)


localrules: all, download_pdb

rule all:
    input:
        config['paths']['lib'] + '/rcsb_index.pkl',
        config['snake_donefiles']['sub0_fill_empty_done']
    output:
        done =  config['snake_donefiles']['sub0_all_done'] 
    shell:
        "touch {output.done}"


rule download_pdb:
    output:
        done =  config['snake_donefiles']['sub0_pdb_download_done']
    params:
        lib = config['paths']['lib']
    shell:
        """
        mkdir -p {params.lib}
        cd {params.lib} 
        rsync -rlpt -v -z -q --delete --port=33444 \
        rsync.rcsb.org::ftp_data/assemblies/mmCIF/divided/ ./rcsb
        touch ../{output.done}
        """


rule ungzip_pdb:
    input:
        config['snake_donefiles']['sub0_pdb_download_done'],
    output:
        done =  config['snake_donefiles']['sub0_ungzip_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000" 
    params:
        scripts = config['paths']['scripts'],
        lib = config['paths']['lib']
    shell:
        """
        {params.scripts}/parallel_ungzip_all.sh {params.lib}/rcsb {threads} 1000
        touch {output.done};
        """


rule split_pdb:
    input:
        config['snake_donefiles']['sub0_ungzip_done'] 
    output:
        done =  config['snake_donefiles']['sub0_split_pdb_done'] 
    threads: config['runtime']['max_threads']
    resources:
        time = "12:00:00",
        mem_mb = "1000000"
    run:
        from parallel_convert_split_cif import parallel_convert_split_rename_cifs
        rcsb = config['paths']['lib'] + '/rcsb'
        exe = config['paths']['cif2pdb']
        parallel_convert_split_rename_cifs(parent_dir=rcsb, cif2pdb_exe=exe, threads=threads)
        simple_write(output.done)



rule index_pdb:
    input:
        config['snake_donefiles']['sub0_split_pdb_done']
    output:
        index_file = config['paths']['lib'] + '/rcsb_index.txt',
        empty_files_pkl = config['intermediate_data_files']['sub0_empty_pdbs_pkl']
    resources:
        time = "4:00:00"
    run:
        from generate_rcsb_index import generate_rcsb_index
        rcsb = config['paths']['lib'] + '/rcsb'
        empty_files = generate_rcsb_index(rcsb_path=rcsb, index_file=output.index_file)
        with open(output.empty_files_pkl, 'wb') as f:
            pickle.dump(empty_files, f)




rule fill_empty_pdb_files:
    input:
        empty_files_pkl = config['intermediate_data_files']['sub0_empty_pdbs_pkl']
    output:
        done = config['snake_donefiles']['sub0_fill_empty_done']
    resources:
        mem_mb = '15000'
    run:
        from parallel_convert_split_cif import fill_empty_pdb
        exe = config['paths']['cif2pdb']
        with open(input.empty_files_pkl, 'rb') as f:
            empty_files = pickle.load(f)
        for ef in empty_files:
            fill_empty_pdb(filepath=ef, cif2pdb_exe=exe) 
        simple_write(output.done, '')
            



rule pdb_index_to_pkl:
    input:
        index_file = config['paths']['lib'] + '/rcsb_index.txt'
    output:
        index_file = config['paths']['lib'] + '/rcsb_index.pkl'
    run:
        from generate_rcsb_index import rcsb_index_to_pkl
        rcsb_index_to_pkl(input.index_file, output.index_file)


        



