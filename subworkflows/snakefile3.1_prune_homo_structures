import os
import sys
import yaml

sys.path.append('..')
from scripts.simple_write import simple_write


intermediates = os.getcwd()

all_homodimers_file = f'{intermediates}/all_homodimers.yaml'
with open(all_homodimers_file, 'r') as f:
    all_homodimers = yaml.safe_load(f)

all_dimers = list(all_homodimers.keys())


rule all:
    input:
        expand('intermediates/all_homodimer_tmp/{dimer}/nonredundant.yaml', dimer=all_dimers)
    output:
        done = 'intermediates/subflow2.done',
        list_ 'intermediates/nonredundant_homodimers.yaml'
    run:
        for list_ in input:
            shell(''' cat {list_} >> intermediates/nonredundant_homodimers.yaml ''')
        simple_write(output.done, 'success')


rule prefilter_structures:
    output:
        list_ = 'intermediates/all_homodimer_tmp/{dimer}/prefiltered.yaml'
    params:
        structures = all_dimers[dimer]
    run:
        from scripts.simple_filters import filter_by_max_len, filter_by_in_afdb
        valid_structures = filter_by_max_len(params.structures, 1024)
        valid_structures = filter_by_in_afdb(valid_structures)
        filtered = {dimer: valid_structures}
        with open(output.list_, 'w') as f:
            yaml.dump(filtered, f, default_flow_style=None)


rule prune_structures:
    input:
        list_ = 'intermediates/all_homodimer_tmp/{dimer}/prefiltered.yaml'
    output:
        list_ = 'intermediates/all_homodimer_tmp/{dimer}/nonredundant.yaml'
    run:
        from scripts.unredundant import RedundantDimers
        with open(input.list_, 'r') as f:
            loaded = yaml.safe_load()
        uniprot = loaded.keys()[0]
        structures = list(loaded.values())
        dimers = RedundantDimers(dimer_tuples=structures, threshold=0.5)
        non_redundant_dimers = {}
        non_redundant_dimers[uniprot] = dimers.prune_redundance(num_workers=1)
        with open(output.list_, 'w') as f:
            yaml.dump(non_redundant_dimers, f, default_flow_style=None)
