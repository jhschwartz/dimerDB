import os
import sys
import requests

sys.path.append('..')
from scripts.simple_write import simple_write



python = '/nfs/turbo/umms-petefred/jaschwa/HDPRED/bin/python'

id_mapping_fn = 'intermediates/idmapping_selected.tab.gz'



#pdb_uniprot_file = 'pdb_chain_uniprot_2022-11-01.csv'
#with open(pdb_uniprot_file, 'r') as f:
#    # get all unique uniprot IDs, which are the third column of the list file
#    uniprots = set([line[2] for line in f.readlines()])


def get_id_mapping():
    if not os.path.exists(id_mapping_fn):
        shell('''
            mkdir -p intermediates/;
            wget -P intermediates/ ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping_selected.tab.gz;
        ''')
    else:
        shell(''' touch {id_mapping_fn} ''')


#with open(get_pdb_uniprot_matching_file(), 'r') as f:
#    lines = f.readlines()[:2] # skip 2 header rows
#    uniprots = list(set([line.split[','][2] for line in lines)) # need unique list of uniprots, each line "pdbcode,chain,uniprot..."
#
#def make_div(prot):
#    return f'{prot[-2]}/{prot[-1]}'
#divs = [make_div(prot) for prot in uniprots]
#pdb_chain_uniprot.csv.gz
#
#rule all:
#    input: expand("prots/{div}/{uniprot}/status/all.done", zip, uniprot=uniprots, div=divs) 

localrules: all, retrieve_id_mapping_file

rule all:
    input: 
        "intermediates/all_homodimers.yaml"
    output:
        done = "intermediates/subflow1.done"
    run:
        simple_write(output.done, 'success')




rule retrieve_id_mapping_file:
    output:
        filename = id_mapping_fn
    run:
        get_id_mapping()



rule create_uniparc_to_others:
    input:
        id_mapping = id_mapping_fn
    output:
        uniparc2others = "intermediates/uniparc2others.yaml"
    threads: 1
    resources:
        time = "12:00:00",
        mem_mb = "10000"
    run:
        from scripts.uniparc_to_uniprot_and_pdb import make_uniparc2others
        make_uniparc2others(input.id_mapping, output.uniparc2others)
          


           
rule derive_all_homodimers:
    input:
        uniparc2others = "intermediates/uniparc2others.yaml"
    output:
        homodimers = "intermediates/all_homodimers.yaml"
    threads: 1
    resources:
        time = "12:00:00",
        mem_mb = "10000"
    run:
        from scripts.derive_all_homodimers import homodimers
        homodimers(input.uniparc2others, output.homodimers)









