import os
import sys
import pickle

configfile: 'config.yaml'

sys.path.append('..')
from scripts.simple_write import simple_write


non_redundant_homodimers = 'intermediates/nonredundant_homodimers.pkl'
non_redundant_homodimers = config['intermediate_data_files']['sub2_homo_prefiltered_pkl']

with open(non_redundant_homodimers, 'rb') as f:
	homodimers_dict = pickle.load(f)
	#uniparcs = list(homodimers_dict.keys())



rule all:
	input:
        config['output']['doubly_nonredundant_homodimers']
	output:
        done = config['donefiles']['sub3_all_done']
	run:
		simple_write(output.done, 'success')



rule align:
	output:
        pklfile = config['output']['doubly_nonredundant_homodimers'] 
		list_ = 'intermediates/working_homodimers.pkl'
	threads: 512 # must make multi node...?
	run:
		from scripts.unredundant import RedundantSeqs
		seqs = RedundantSeqs(seq_names=uniprots, threshold=0.7, homodimers_dict=homodimers_dict)
		non_redundant_seqs = seqs.prune_redundancy(num_workers=threads)
		filtered = {homodimers_dict[seqname] for seqname in non_redundant_seqs}
		with open(output.list_, 'wb') as f:
			pickle.dump(filtered, f)

