import os
import sys
import yaml

configfn = 'config.yaml'
configfile: configfn

sys.path.append('..')
from scripts.simple_write import simple_write
from scripts.simple_filters import filter_by_max_len, filter_by_in_afdb
from scripts.unredundant import RedundantDimerStructures


all_homodimers_file = config['snake_data_yaml_files']['sub1_all_homodimers_yaml']
with open(all_homodimers_file, 'r') as f:
    all_homodimers = yaml.safe_load(f)

all_dimers_names = list(all_homodimers.keys())


rule all:
    input:
        expand(config['paths']['intermediates_homodimer_filtering']+'/{dimer}/nonredundant.yaml', dimer=all_dimers_names) 
    output:
        done = config['paths']['snake_donefiles']['sub2_all_done'],
        yamlfile = config['snake_data_yaml_files']['sub3.1_nonredundant_homodimers']
    run:
        for list_ in input:
            shell(''' cat {list_} >> {output.yamlfile} ''')
        simple_write(output.done, 'success')


rule prefilter_structures:
    output:
        yamlfile = f"{ config['paths']['intermediates_homodimer_filtering'] }/{dimer}/prefiltered.yaml"
    params:
        structures = all_homodimers[dimer]
    run:
        valid_structures = filter_by_max_len(params.structures, 1024)
        valid_structures = filter_by_in_afdb(valid_structures)
        filtered = {dimer: valid_structures}
        with open(output.yamlfile, 'w') as f:
            yaml.dump(filtered, f, default_flow_style=None)


rule prune_structures:
    input:
        yamlfile = f"{ config['paths']['intermediates_homodimer_filtering'] }/{dimer}/prefiltered.yaml"
    output:
        yamlfile = f"{ config['paths']['intermediates_homodimer_filtering'] }/{dimer}/nonredundant.yaml"
    threads: 4
    resources:
        memory_mb: 5000,
        time: "4:00:00" 
    run:
        with open(input.yamlfile, 'r') as f:
            loaded = yaml.safe_load()
        uniparc = loaded.keys()[0]
        structures = list(loaded.values())
        dimers = RedundantDimerStructures(dimer_tuples=structures, threshold=config['database_settings']['dimer_cluster_distance_threshold'], config=config)
        non_redundant_dimers = {}
        non_redundant_dimers[uniparc] = dimers.prune_redundancy(num_workers=threads)
        with open(output.list_, 'w') as f:
            yaml.dump(non_redundant_dimers, f, default_flow_style=None)

