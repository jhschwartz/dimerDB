import os
import sys
import pickle

configfn = 'config.pkl'
configfile: configfn

sys.path.append('..')
from scripts.simple_write import simple_write
from scripts.simple_filters import filter_by_max_len, filter_by_in_afdb
from scripts.unredundant import RedundantDimerStructures


all_homodimers_file = config['intermediate_data_files']['sub1_all_homodimers_pkl']
with open(all_homodimers_file, 'rb') as f:
    all_homodimers = pickle.load(f)

all_dimers_names = list(all_homodimers.keys())


rule all:
    input:
        expand(config['paths']['intermediates_homodimer_filtering']+'/{dimer}/filtered.pkl', dimer=all_dimers_names) 
    output:
        done = config['paths']['snake_donefiles']['sub2_all_done'],
        pklfile = config['intermediate_data_files']['sub3_nonredundant_homodimers']
    run:
        for list_ in input:
            shell(''' cat {list_} >> {output.pklfile} ''')
        simple_write(output.done, 'success')



rule prune_structures:
    input:
        pklfile = f"{ config['paths']['intermediates_homodimer_filtering'] }/{dimer}/prefiltered.pkl"
    output:
        pklfile = f"{ config['paths']['intermediates_homodimer_filtering'] }/{dimer}/nonredundant.pkl"
    threads: 4
    resources:
        memory_mb: 5000,
        time: "4:00:00" 
    run:
        with open(input.pklfile, 'r') as f:
            loaded = pkl.safe_load()
        uniparc = loaded.keys()[0]
        structures = list(loaded.values())
        dimers = RedundantDimerStructures(dimer_tuples=structures, threshold=config['database_settings']['dimer_cluster_distance_threshold'], config=config)
        non_redundant_dimers = {}
        non_redundant_dimers[uniparc] = dimers.prune_redundancy(num_workers=threads)
        with open(output.list_, 'wb') as f:
            pickle.dump(non_redundant_dimers, f)

